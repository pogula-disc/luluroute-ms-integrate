spring:
  application:
    name: luluroute-ms-integrate
  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher
  cloud:
    stream:
      bindings:
        output:
          contentType: application/*+avro

  #Kafka configuration
  kafka:
    bootstrap-servers: ${kafka_brokers}
    listener:
      ack-mode: MANUAL_IMMEDIATE
    properties:
      specific.avro.reader: true
      reconnect.backoff.ms: 500
      reconnect.backoff.max.ms: 7200000
      auto-create-topics: false
      security.protocol: SASL_SSL
      auto.register.schemas: false
      schema.registry.url: ${schema_registry_url}
      basic.auth.credentials.source: ${auth_credentials_source}
      basic.auth.user.info: ${avro_registry_key}:${avro_registry_secret}
      sasl:
        mechanism: "PLAIN"
        jaas:
          config: org.apache.kafka.common.security.plain.PlainLoginModule required username="${kafka_username}" password="${kafka_password}";
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      enable-auto-commit: false
      auto-offset-reset: latest
      group-id: grp-c-luluroute-intg-artifact
      timeout: 30000
      properties:
        # Delegate deserializers to avoid poison pill
        spring.deserializer.value.delegate.class: io.confluent.kafka.serializers.KafkaAvroDeserializer


shipmentMessage:
  redis:
    host: ${redis_host}
    port: ${redis_port}
    ttlInMilliseconds: 500000
    requestCache:
      keyPrefix: "SHIPMENTMESSAGE::"
    responseCache:
      keyPrefix: "SHIPMENTRESPONSE::"
    cancelResponseCache:
      keyPrefix: "SHIPMENTCANCELRESPONSE::"
logging:
  level:
    root: INFO
    com.lululemon: INFO
  pattern:
    console: "{\"time\": \"%d\", \"level\": \"%p\", \"thread\": \"%t\", \"shipment-correlation-id\": \"%X{X-Shipment-Correlation-Id}\",\"message-correlation-id\": \"%X{X-Message-Correlation-Id}\",   \"source\": \"%logger{80}\", \"message\":\"%replace(%msg){'(\"(contentFromCarrier|contentRendered|Label|label)\":\\s*\")[^\"]*(\")', '$1******\"'}\"}%n"

management:
  health:
    livenessstate:
      enabled: true
    readinessstate:
      enabled: true
    probes:
      enabled: true
    env:
      enabled: true
  endpoint:
    health:
      probes:
        enabled: true
    info:
      enabled: true
    loggers:
      enabled: true
    # web:
    #   # base-path: /actuator
    #   exposure:
    #     include: "*"
  endpoints:
    web:
      exposure:
        include: 'info, health, prometheus, loggers'
  info:
    env:
      enabled: 'true'
info:
  app:
    name: '${spring.application.name}'
    name1: '@project.name@'
    description: '@project.description@'
    version: '@project.version@'

config:
  async:
    integrate:
      corepoolsize: 2
      maxpoolsize: 4
  shipment.message:
    output.topic: ${shipment_source_topic}
  shipment.artifact:
    corepoolsize: 3
    consumerGroup: ${shipment_consumer_group}
    core.topic: ${artifact_source_topic}
    dlq.topic: ${artifact_dlq_topic}
    retry.topic: ${artifact_retry_topic}
    filters:
      - artifactType: 7900
        artifactStatus: 200
      - artifactType: 7900
        artifactStatus: 500
      - artifactType: 7100
        artifactStatus: 500
      - artifactType: 7200
        artifactStatus: 500
      - artifactType: 5100
        artifactStatus: 500
      - artifactType: 9100
        artifactStatus: 200
      - artifactType: 9100
        artifactStatus: 500
    canadapost:
      carrier.code: ${canadapost_carrier_code}


  error.processing:
    scheduler.rate: 1000
    retryTopicAttempts: 3
    retryTopicInterval: 60000
    retryTopicMultiplier: 2
    retryLastGaspDelay: 7200000

  metrics:
    prometheus:
      target.down: target_down
      last.gasp: app.records.retry
      dlq: app.record.errored
      consumer.records.success: app.records.success
      elapsedtime: app.records.elapsedtime
  redis:
    cluster:
      enabled: ${redis_cluster_enabled}

      
